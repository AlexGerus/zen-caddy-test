scalar DateTime

type BatchPayload {
  count: Int!
}

enum UserDistinctFieldEnum {
  id
  createdAt
  email
  name
  password
  groupId
  testA
}

enum PostDistinctFieldEnum {
  id
  published
  title
  authorId
  createdAt
  updatedAt
}

enum CommentDistinctFieldEnum {
  id
  contain
  postId
  authorId
  createdAt
  updatedAt
}

enum GroupDistinctFieldEnum {
  id
  name
  createdAt
  updatedAt
}

enum SortOrder {
  asc
  desc
}

enum QueryMode {
  default
  insensitive
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IntFilter
  createdAt: DateTimeFilter
  email: StringFilter
  name: StringNullableFilter
  password: StringFilter
  posts: PostListRelationFilter
  group: GroupWhereInput
  groupId: IntNullableFilter
  comments: CommentListRelationFilter
  testA: StringNullableFilter
}

input UserOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  email: SortOrder
  name: SortOrder
  password: SortOrder
  groupId: SortOrder
  testA: SortOrder
}

input UserWhereUniqueInput {
  id: Int
  email: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IntFilter
  published: BoolFilter
  title: StringFilter
  author: UserWhereInput
  authorId: IntNullableFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PostOrderByInput {
  id: SortOrder
  published: SortOrder
  title: SortOrder
  authorId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PostWhereUniqueInput {
  id: Int
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: IntFilter
  contain: StringFilter
  post: PostWhereInput
  postId: IntFilter
  author: UserWhereInput
  authorId: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CommentOrderByInput {
  id: SortOrder
  contain: SortOrder
  postId: SortOrder
  authorId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input CommentWhereUniqueInput {
  id: Int
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  id: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
}

input GroupOrderByInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input GroupWhereUniqueInput {
  id: Int
}

input UserCreateInput {
  createdAt: DateTime
  email: String!
  name: String
  password: String!
  testA: String
  posts: PostCreateManyWithoutAuthorInput
  group: GroupCreateOneWithoutUsersInput
  comments: CommentCreateManyWithoutAuthorInput
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  testA: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  group: GroupUpdateOneWithoutUsersInput
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  testA: NullableStringFieldUpdateOperationsInput
}

input PostCreateInput {
  published: Boolean
  title: String!
  createdAt: DateTime
  updatedAt: DateTime
  author: UserCreateOneWithoutPostsInput
  comments: CommentCreateManyWithoutPostInput
}

input PostUpdateInput {
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateManyMutationInput {
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentCreateInput {
  contain: String!
  createdAt: DateTime
  updatedAt: DateTime
  post: PostCreateOneWithoutCommentsInput!
  author: UserCreateOneWithoutCommentsInput
}

input CommentUpdateInput {
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
  author: UserUpdateOneWithoutCommentsInput
}

input CommentUpdateManyMutationInput {
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GroupCreateInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  users: UserCreateManyWithoutGroupInput
}

input GroupUpdateInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: UserUpdateManyWithoutGroupInput
}

input GroupUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: Int
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTime
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: String
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: String
}

input PostListRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input GroupRelationFilter {
  is: GroupWhereInput
  isNot: GroupWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: Int
}

input CommentListRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input BoolFilter {
  equals: Boolean
  not: Boolean
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input PostRelationFilter {
  is: PostWhereInput
  isNot: PostWhereInput
}

input UserListRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input GroupCreateOneWithoutUsersInput {
  create: GroupCreateWithoutUsersInput
  connect: GroupWhereUniqueInput
}

input CommentCreateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input StringFieldUpdateOperationsInput {
  set: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  deleteMany: [PostScalarWhereInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input GroupUpdateOneWithoutUsersInput {
  create: GroupCreateWithoutUsersInput
  connect: GroupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GroupUpdateWithoutUsersDataInput
  upsert: GroupUpsertWithoutUsersInput
}

input CommentUpdateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input PostUpdateOneRequiredWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
}

input UserUpdateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserCreateManyWithoutGroupInput {
  create: [UserCreateWithoutGroupInput!]
  connect: [UserWhereUniqueInput!]
}

input UserUpdateManyWithoutGroupInput {
  create: [UserCreateWithoutGroupInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutGroupInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutGroupInput!]
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input PostCreateWithoutAuthorInput {
  published: Boolean
  title: String!
  createdAt: DateTime
  updatedAt: DateTime
  comments: CommentCreateManyWithoutPostInput
}

input GroupCreateWithoutUsersInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input CommentCreateWithoutAuthorInput {
  contain: String!
  createdAt: DateTime
  updatedAt: DateTime
  post: PostCreateOneWithoutCommentsInput!
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  id: IntFilter
  published: BoolFilter
  title: StringFilter
  authorId: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input GroupUpdateWithoutUsersDataInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GroupUpsertWithoutUsersInput {
  update: GroupUpdateWithoutUsersDataInput!
  create: GroupCreateWithoutUsersInput!
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutAuthorDataInput!
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
  id: IntFilter
  contain: StringFilter
  postId: IntFilter
  authorId: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutAuthorDataInput!
  create: CommentCreateWithoutAuthorInput!
}

input UserCreateWithoutPostsInput {
  createdAt: DateTime
  email: String!
  name: String
  password: String!
  testA: String
  group: GroupCreateOneWithoutUsersInput
  comments: CommentCreateManyWithoutAuthorInput
}

input CommentCreateWithoutPostInput {
  contain: String!
  createdAt: DateTime
  updatedAt: DateTime
  author: UserCreateOneWithoutCommentsInput
}

input UserUpdateWithoutPostsDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  testA: NullableStringFieldUpdateOperationsInput
  group: GroupUpdateOneWithoutUsersInput
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input PostCreateWithoutCommentsInput {
  published: Boolean
  title: String!
  createdAt: DateTime
  updatedAt: DateTime
  author: UserCreateOneWithoutPostsInput
}

input UserCreateWithoutCommentsInput {
  createdAt: DateTime
  email: String!
  name: String
  password: String!
  testA: String
  posts: PostCreateManyWithoutAuthorInput
  group: GroupCreateOneWithoutUsersInput
}

input PostUpdateWithoutCommentsDataInput {
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutPostsInput
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input UserUpdateWithoutCommentsDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  testA: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  group: GroupUpdateOneWithoutUsersInput
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserCreateWithoutGroupInput {
  createdAt: DateTime
  email: String!
  name: String
  password: String!
  testA: String
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
}

input UserUpdateWithWhereUniqueWithoutGroupInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutGroupDataInput!
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  id: IntFilter
  createdAt: DateTimeFilter
  email: StringFilter
  name: StringNullableFilter
  password: StringFilter
  groupId: IntNullableFilter
  testA: StringNullableFilter
}

input UserUpsertWithWhereUniqueWithoutGroupInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutGroupDataInput!
  create: UserCreateWithoutGroupInput!
}

input PostUpdateWithoutAuthorDataInput {
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateManyDataInput {
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutAuthorDataInput {
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutPostDataInput {
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutCommentsInput
}

input UserUpdateWithoutGroupDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  testA: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  testA: NullableStringFieldUpdateOperationsInput
}

type AggregateUser {
  count: Int!
  avg: UserAvgAggregateOutputType
  sum: UserSumAggregateOutputType
  min: UserMinAggregateOutputType
  max: UserMaxAggregateOutputType
}

type AggregatePost {
  count: Int!
  avg: PostAvgAggregateOutputType
  sum: PostSumAggregateOutputType
  min: PostMinAggregateOutputType
  max: PostMaxAggregateOutputType
}

type AggregateComment {
  count: Int!
  avg: CommentAvgAggregateOutputType
  sum: CommentSumAggregateOutputType
  min: CommentMinAggregateOutputType
  max: CommentMaxAggregateOutputType
}

type AggregateGroup {
  count: Int!
  avg: GroupAvgAggregateOutputType
  sum: GroupSumAggregateOutputType
  min: GroupMinAggregateOutputType
  max: GroupMaxAggregateOutputType
}

type UserAvgAggregateOutputType {
  id: Float!
  groupId: Float!
}

type UserSumAggregateOutputType {
  id: Int!
  groupId: Int
}

type UserMinAggregateOutputType {
  id: Int!
  groupId: Int
}

type UserMaxAggregateOutputType {
  id: Int!
  groupId: Int
}

type PostAvgAggregateOutputType {
  id: Float!
  authorId: Float!
}

type PostSumAggregateOutputType {
  id: Int!
  authorId: Int
}

type PostMinAggregateOutputType {
  id: Int!
  authorId: Int
}

type PostMaxAggregateOutputType {
  id: Int!
  authorId: Int
}

type CommentAvgAggregateOutputType {
  id: Float!
  postId: Float!
  authorId: Float!
}

type CommentSumAggregateOutputType {
  id: Int!
  postId: Int!
  authorId: Int
}

type CommentMinAggregateOutputType {
  id: Int!
  postId: Int!
  authorId: Int
}

type CommentMaxAggregateOutputType {
  id: Int!
  postId: Int!
  authorId: Int
}

type GroupAvgAggregateOutputType {
  id: Float!
}

type GroupSumAggregateOutputType {
  id: Int!
}

type GroupMinAggregateOutputType {
  id: Int!
}

type GroupMaxAggregateOutputType {
  id: Int!
}

type User {
  id: Int!
  createdAt: DateTime!
  email: String!
  name: String
  password: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: PostDistinctFieldEnum): [Post!]!
  group: Group
  groupId: Int
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, cursor: CommentWhereUniqueInput, take: Int, skip: Int, distinct: CommentDistinctFieldEnum): [Comment!]!
  testA: String
}

type Query {
  findOneUser(where: UserWhereUniqueInput!): User
  findManyUser(where: UserWhereInput, orderBy: [UserOrderByInput!], cursor: UserWhereUniqueInput, skip: Int, take: Int): [User!]
  findManyUserCount(where: UserWhereInput, orderBy: [UserOrderByInput!], cursor: UserWhereUniqueInput, skip: Int, take: Int): Int!
  findOnePost(where: PostWhereUniqueInput!): Post
  findManyPost(where: PostWhereInput, orderBy: [PostOrderByInput!], cursor: PostWhereUniqueInput, skip: Int, take: Int): [Post!]
  findManyPostCount(where: PostWhereInput, orderBy: [PostOrderByInput!], cursor: PostWhereUniqueInput, skip: Int, take: Int): Int!
  findOneComment(where: CommentWhereUniqueInput!): Comment
  findManyComment(where: CommentWhereInput, orderBy: [CommentOrderByInput!], cursor: CommentWhereUniqueInput, skip: Int, take: Int): [Comment!]
  findManyCommentCount(where: CommentWhereInput, orderBy: [CommentOrderByInput!], cursor: CommentWhereUniqueInput, skip: Int, take: Int): Int!
  findOneGroup(where: GroupWhereUniqueInput!): Group
  findManyGroup(where: GroupWhereInput, orderBy: [GroupOrderByInput!], cursor: GroupWhereUniqueInput, skip: Int, take: Int): [Group!]
  findManyGroupCount(where: GroupWhereInput, orderBy: [GroupOrderByInput!], cursor: GroupWhereUniqueInput, skip: Int, take: Int): Int!
}

type Mutation {
  createOneUser(data: UserCreateInput!): User!
  updateOneUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User!
  deleteOneUser(where: UserWhereUniqueInput!): User
  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User
  deleteManyUser(where: UserWhereInput): BatchPayload
  updateManyUser(where: UserWhereInput, data: UserUpdateManyMutationInput): BatchPayload
  createOnePost(data: PostCreateInput!): Post!
  updateOnePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post!
  deleteOnePost(where: PostWhereUniqueInput!): Post
  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post
  deleteManyPost(where: PostWhereInput): BatchPayload
  updateManyPost(where: PostWhereInput, data: PostUpdateManyMutationInput): BatchPayload
  createOneComment(data: CommentCreateInput!): Comment!
  updateOneComment(where: CommentWhereUniqueInput!, data: CommentUpdateInput!): Comment!
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  upsertOneComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment
  deleteManyComment(where: CommentWhereInput): BatchPayload
  updateManyComment(where: CommentWhereInput, data: CommentUpdateManyMutationInput): BatchPayload
  createOneGroup(data: GroupCreateInput!): Group!
  updateOneGroup(where: GroupWhereUniqueInput!, data: GroupUpdateInput!): Group!
  deleteOneGroup(where: GroupWhereUniqueInput!): Group
  upsertOneGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group
  deleteManyGroup(where: GroupWhereInput): BatchPayload
  updateManyGroup(where: GroupWhereInput, data: GroupUpdateManyMutationInput): BatchPayload
}

type Post {
  id: Int!
  published: Boolean!
  title: String!
  author: User
  authorId: Int
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, cursor: CommentWhereUniqueInput, take: Int, skip: Int, distinct: CommentDistinctFieldEnum): [Comment!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Comment {
  id: Int!
  contain: String!
  post: Post!
  postId: Int!
  author: User
  authorId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Group {
  id: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  users(where: UserWhereInput, orderBy: UserOrderByInput, cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: UserDistinctFieldEnum): [User!]!
}
